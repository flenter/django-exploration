---
- hosts: all
  sudo: true
  vars_files:
    - vars.yml
  roles:
    - common
    - appserver

  # - name: ensure required packages are installed.
  #   pip: requirements=${project_root}/requirements.txt virtualenv=${project_root}/venv/
  # also install: setproctitle

  # # - name: Create the SSH directory.
  # #   file: state=directory path=${project_root}/home/.ssh/
  # #   only_if: "$vm == 0"

  # # - name: Upload SSH known hosts.
  # #   copy: src=known_hosts dest=${project_root}/home/.ssh/known_hosts mode=0600
  # #   only_if: "$vm == 0"

  # # - name: Upload SSH key.
  # #   copy: src=key dest=${project_root}/home/.ssh/id_rsa mode=0600
  # #   only_if: "$vm == 0"

  # # - name: Create the SSL directory.
  # #   file: state=directory path=${project_root}/home/ssl/

  # # - name: Upload SSL private key.
  # #   copy: src=files/ssl/${project_name}.pem dest=${project_root}/home/ssl/${project_name}.pem

  # # - name: Upload SSH public key.
  # #   copy: src=files/ssl/${project_name}.key.encrypted dest=${project_root}/home/ssl/${project_name}.key

  # - name: create database
  #   django_manage:

  # - name: Create database.
    # shell: ${project_root}/env/bin/python ${project_root}/manage.py sqlcreate --router=default | sudo -u postgres psql

  # - name: Create database.
  #   shell: ${project_root}/env/bin/python ${project_root}/manage.py sqlcreate --router=default | sudo -u postgres psql

# - include: deploy.yml

# - hosts: servers
#   vars_files:
#     - vars.yml
#   gather_facts: false
#   sudo: true

#   tasks:
#   - name: Restart services.
#     service: name=${project_name}_${item} state=restarted
#     with_items: ${initfiles}