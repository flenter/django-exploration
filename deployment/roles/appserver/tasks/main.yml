# - name: add apt key for ubuntugis
#   apt_key: id=314DF160 url=https://ftp-master.debian.org/keys/archive-key-6.0.asc state=present

- name: Install required system packages.
  action: apt pkg=${item} state=installed update-cache=yes
  sudo: yes
  with_items:
    - libevent-dev
    - nginx
    - python-dev
    - python-virtualenv
    - python-psycopg2
    - postgresql-server-dev-9.1
    - binutils
    - libproj-dev
    - gdal-bin
    - libgeos-dev

- name: Create the project directory.
  sudo: yes
  action: file state=directory path=${project_root}

- name: Create user.
  sudo: yes
  action: user home=${project_root}/home/ name=${project_name} state=present

- name: Update the project directory.
  sudo: yes
  action: file group=${project_name} owner=${project_name} mode=755 state=directory path=${project_root}

- name: Change project directorys' permissions.
  sudo: yes
  action: shell chown -R ${project_name}:${project_name} ${project_root}

- name: Put source files in correct location
  sudo: yes
  action: shell cp -R ${source_location}/* ${project_root}

- name: Remove files from original source location
  sudo: yes
  action: shell find . -name ".*" -exec rm -rf {} \;
  when: source_location_auto_remove == "false"

- name: remove default nginx site
  sudo: yes
  action: file path=/etc/nginx/sites-enabled/default state=absent

- name: Install nginx configuration file.
  sudo: yes
  action: template src=nginx.conf.j2 dest=/etc/nginx/sites-enabled/${project_name}

- name: restart nginx
  action: service name=nginx state=restarted
  sudo: yes

- name: Create the project directory.
  sudo: yes
  action: file state=directory path=${project_root}/run group=${project_name} owner=${project_name}

- name: Ensure app start script exists.
  sudo: yes
  action: template src=gunicorn_start.sh.j2 dest=${project_root}/run/gunicorn_start

- name: Set permissions for app script
  sudo: yes
  action: file path=${project_root}/run/gunicorn_start mode=0755 owner=${project_name} group=${project_name}

- name: Install app scripts.
  sudo: yes
  action: template src=gunicorn.conf.j2 dest=/etc/supervisor/conf.d/${project_name}_gunicorn.conf

- name: ensure required packages are installed.
  sudo: yes
  action: pip requirements=${project_root}/requirements.txt virtualenv=${project_root}/venv/

- name: ensure setproctitle is installed.
  sudo: yes
  action: pip name=setproctitle virtualenv=${project_root}/venv/

- name: ensure owner of content
  action: file state=directory group=${project_name} owner=${project_name} recurse=yes path=${project_root}
  sudo: yes

- name: sync database
  action: django_manage command=syncdb app_path=${project_root} settings=${project_name}.settings virtualenv=${project_root}/venv
  environment:
    DATABASE_URL: ${database_url}

- name: ensure initial_data file was not loaded before
  action: stat path=${project_root}/run/initial_data_loaded
  register: inital_data
  tags:
    - fixture

- name: ensure inital_data was loaded
  action: django_manage command=loaddata fixtures=${item} app_path=${project_root} settings=${project_name}.settings virtualenv=${project_root}/venv
  with_items:
    - data/locations.json
    - data/users.json
  environment:
    DATABASE_URL: ${database_url}
  when: inital_data.stat.exists == false
  tags:
    - fixture

- name: mark initial_data as loaded
  action: shell touch ${project_root}/run/initial_data_loaded
  sudo: yes
  tags:
    - fixture
  when: inital_data.stat.exists == false

- name: make sure app is present
  sudo: yes
  action: supervisorctl name=${project_name} state=present

# - name: app is stopped
  # sudo: yes
  # action: supervisorctl name=${project_name} state=stopped

- name: app is started
  sudo: yes
  action: supervisorctl name=${project_name} state=restarted

- name: ensure static folder exists
  action: file path=${project_root}/static state=directory owner=${project_name} group=${project_name}
  sudo: yes

- name: ensure static media exists
  file: path=${project_root}/media state=directory owner=${project_name} group=${project_name}
  sudo: yes

- name: collect static
  action: django_manage command=collectstatic app_path=${project_root} settings=${project_name}.settings virtualenv=${project_root}/venv
  environment:
    DATABASE_URL: ${database_url}
  sudo: yes
  tags:
    - static
# - name: "wait for app started"
#   wait_for: port=${project_port} delay=5 timeout=30